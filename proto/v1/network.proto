syntax = "proto3";

package beget.network.v1.network;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";


service NetworkService {

    rpc getDedicatedIPList (GetDedicatedIPListRequest) returns (GetDedicatedIPListResponse) {
        option (google.api.http) = {
			get: "/v1/network/customer/ip"
		};
    }

    rpc addDedicatedIP (AddDedicatedIPRequest) returns (AddDedicatedIPResponse) {
        option (google.api.http) = {
			post: "/v1/network/customer/ip"
			body: "*"
		};
    }

    rpc setAutoRenew (SetAutoRenewRequest) returns (SetAutoRenewResponse) {
        option (google.api.http) = {
			patch: "/v1/network/customer/ip/{ip}/renew"
			body: "*"
		};
    }

    rpc deleteIP (DeleteIPRequest) returns (DeleteIPResponse) {
        option (google.api.http) = {
			delete: "/v1/network/customer/ip/{ip}"
		};
    }

    rpc setIPAsTransport (SetIPAsTransportRequest) returns (SetIPAsTransportResponse) {
        option (google.api.http) = {
			patch: "/v1/network/mail/set-ip"
			body: "*"
		};
    }

    rpc unsetIPAsTransport (UnsetIPAsTransportRequest) returns (UnsetIPAsTransportResponse) {
        option (google.api.http) = {
			patch: "/v1/network/mail/unset-ip"
			body: "*"
		};
    }

    rpc setDomainIP (SetDomainIPRequest) returns (SetDomainIPResponse) {
        option (google.api.http) = {
			patch: "/v1/network/domain/set-ip"
			body: "*"
		};
    }

    rpc unSetDomainIP (UnSetDomainIPRequest) returns (UnSetDomainIPResponse) {
        option (google.api.http) = {
			patch: "/v1/network/domain/unset-ip"
			body: "*"
		};
    }
}

message GetDedicatedIPListRequest {

}

message GetDedicatedIPListResponse {
    repeated IP ip = 1;
}

message AddDedicatedIPRequest {

}

message AddDedicatedIPResponse {

    oneof result {
        IP ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;

        // недостаточно денег
        MONEY_NOT_ENOUGH = 1;

        // нехорошему клиенту запрещено добавлять ip
        NOT_PERMITTED = 2;

        // закончились адреса
        RESOURCES_DEPLETED = 3;
    }
}

message SetAutoRenewRequest {
    string ip = 1;
    bool state = 2;
}

message SetAutoRenewResponse {
    oneof result {
        bool new_state = 1;
        Error error = 2;
    }
    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;
    }
}

message DeleteIPRequest {
    string ip = 1;
}

message DeleteIPResponse {
    oneof result {
        IP ip = 1;
        Error error = 2;
    }
    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;

        // ресурс не принадлежит клиенту
        INVALID_OWNER = 2;
    }
}

message SetIPAsTransportRequest {
    string ip = 1;
}
message SetIPAsTransportResponse {
    oneof result {
        IP ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;

        // домен не найден
        DOMAIN_NOT_FOUND = 1;

        // адрес не в системе
        ADDRESS_NOT_RESERVED = 2;

        // ip не принадлежит клиенту
        INVALID_OWNER_IP = 3;
    }
}
message UnsetIPAsTransportRequest {
    string ip = 1;
}
message UnsetIPAsTransportResponse {
    oneof result {
        IP ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;

        // домен не найден
        DOMAIN_NOT_FOUND = 1;

        // адрес не в системе
        ADDRESS_NOT_RESERVED = 2;

        // ip не принадлежит клиенту
        INVALID_OWNER_IP = 3;
    }
}


message SetDomainIPRequest {
    string ip = 1;
    string fqdn = 2;
}
message SetDomainIPResponse {
    oneof result {
        IP ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;

        // домен не найден
        DOMAIN_NOT_FOUND = 1;

        // адрес не в системе
        ADDRESS_NOT_RESERVED = 2;

        // ip не принадлежит клиенту
        INVALID_OWNER_IP = 3;

        // домен не принадлежит клиенту
        INVALID_OWNER_DOMAIN = 4;
    }
}
message UnSetDomainIPRequest {
    string ip = 1;
    string fqdn = 2;
}
message UnSetDomainIPResponse {
    oneof result {
        IP ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;

        // домен не найден
        DOMAIN_NOT_FOUND = 1;

        // адрес не в системе
        ADDRESS_NOT_RESERVED = 2;

        // ip не принадлежит клиенту
        INVALID_OWNER_IP = 3;

        // домен не принадлежит клиенту
        INVALID_OWNER_DOMAIN = 4;
    }
}


message IP {
    string ip = 1;
    string option_id = 2;
    string expires_at = 3; // дата по формату w3c
    double cost = 4;
    bool is_auto_renew_enabled = 5;
    repeated string fqdn = 6;
    bool is_special_transport = 7;
}


