syntax = "proto3";

package beget.network.v1.network;

import "google/api/annotations.proto";


service IpService {

    rpc getDedicatedIpList (GetDedicatedIpListRequest) returns (GetDedicatedIpListResponse) {
        option (google.api.http) = {
			get: "/v1/network/ip"
		};
    }

    rpc addDedicatedIp (AddDedicatedIpRequest) returns (AddDedicatedIpResponse) {
        option (google.api.http) = {
			post: "/v1/network/ip"
			body: "*"
		};
    }

    rpc setAutoRenew (SetAutoRenewRequest) returns (SetAutoRenewResponse) {
        option (google.api.http) = {
			patch: "/v1/network/ip/{ip}/renew"
			body: "*"
		};
    }

    rpc deleteIp (DeleteIpRequest) returns (DeleteIpResponse) {
        option (google.api.http) = {
			delete: "/v1/network/ip/{ip}"
		};
    }

    rpc setIpAsTransport (SetIpAsTransportRequest) returns (SetIpAsTransportResponse) {
        option (google.api.http) = {
			patch: "/v1/network/set-ip-as-transport"
			body: "*"
		};
    }

    rpc unsetIpAsTransport (UnsetIpAsTransportRequest) returns (UnsetIpAsTransportResponse) {
        option (google.api.http) = {
			patch: "/v1/network/unset-ip-as-transport"
			body: "*"
		};
    }

    rpc setDomainIp (SetDomainIpRequest) returns (SetDomainIpResponse) {
        option (google.api.http) = {
			patch: "/v1/network/set-domain-ip"
			body: "*"
		};
    }

    rpc unSetDomainIp (UnSetDomainIpRequest) returns (UnSetDomainIpResponse) {
        option (google.api.http) = {
			patch: "/v1/network/unset-domain-ip"
			body: "*"
		};
    }
}

message GetDedicatedIpListRequest {

}

message GetDedicatedIpListResponse {
    repeated Ip ip = 1;
}

message AddDedicatedIpRequest {

}

message AddDedicatedIpResponse {

    oneof result {
        Ip ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;

        // недостаточно денег
        MONEY_NOT_ENOUGH = 1;

        // нехорошему клиенту запрещено добавлять ip
        NOT_PERMITTED = 2;

        // закончились адреса
        RESOURCES_DEPLETED = 3;
    }
}

message SetAutoRenewRequest {
    string ip = 1;
    bool state = 2;
}

message SetAutoRenewResponse {
    oneof result {
        bool new_state = 1;
        Error error = 2;
    }
    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;
    }
}

message DeleteIpRequest {
    string ip = 1;
}

message DeleteIpResponse {
    oneof result {
        Ip ip = 1;
        Error error = 2;
    }
    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;
    }
}

message SetIpAsTransportRequest {
    string ip = 1;
}
message SetIpAsTransportResponse {
    oneof result {
        Ip ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;
    }
}
message UnsetIpAsTransportRequest {
    string ip = 1;
}
message UnsetIpAsTransportResponse {
    oneof result {
        Ip ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;
    }
}


message SetDomainIpRequest {
    string ip = 1;
    string fqdn = 2;
}
message SetDomainIpResponse {
    oneof result {
        Ip ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;
    }
}
message UnSetDomainIpRequest {
    string ip = 1;
    string fqdn = 2;
}
message UnSetDomainIpResponse {
    oneof result {
        Ip ip = 1;
        Error error = 2;
    }

    enum Error {
        // Внутренняя ошибка сервера
        INTERNAL_ERROR = 0;
    }
}


message Ip {
    string address = 1;
    string expires_at = 2; // дата по формату w3c
    double cost = 3;
    bool is_auto_renew_enabled = 4;
    repeated string fqdn = 5;
    bool is_special_transport = 6;
}


